import numpy as npfrom haversine import haversineimport operator# import Queuenp.set_printoptions(linewidth=75)import copyfrom selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom time import sleepimport gmplotimport osclass Nodes:	def __init__(self, number, name, lat_, long_):		self.number = number		self.name = name		self.lat = lat_		self.long = long_			def print_node(self):		print(self.number, self.name, self.lat, self.long)		def find_distance(self, other):		p, q = self.lat, self.long		x, y = other.lat, other.long		d = haversine((p, q), (x, y))		return ddef A_star(nodes, heuristic, actual, start, goal):		openset = set()	openset.add(start.number)	closedset = set()		came_from = {}	came_from[start.number] = None	gscore = np.ones((len(nodes), 1))*10000	fscore = np.ones((len(nodes), 1))*10000	gscore[start.number] = 0	fscore[start.number] = heuristic[start.number][goal.number]	queop = 0	while len(openset) != 0:		queop += 1		m = 10000000		current = None		for xxx in openset:			if fscore[xxx] < m:				m = fscore[xxx]				current = xxx		if current == goal.number:			print("queue operations: " + str(queop))			return came_from, fscore, closedset		openset.remove(current)		closedset.add(current)		some_dic = {}		for i in range(len(actual[current])):			some_dic[i] = actual[current][i]		sorted_dic = sorted(some_dic.items(), key=operator.itemgetter(1))		neighbors = [sorted_dic[1][0], sorted_dic[2][0], sorted_dic[3][0]]		for node in neighbors:			if node != current:				if node in closedset:					continue				if node not in openset:					openset.add(node)								tempG = gscore[current][0] + actual[current][node]								if tempG > gscore[node][0]:					continue				came_from[node] = current				gscore[node] = tempG				fscore[node] = gscore[node] + heuristic[node][goal.number]	return None, None, None					coordinates = [('Rashtrapati Bhavan, Delhi', (28.6141527, 77.1959622)), ('Bangla Sahib, Delhi', (28.6263529, 77.2090803)), ('Metro Museum, Delhi', (28.6232969, 77.2144746)), ('India Gate, Delhi', (28.612912, 77.2295097)), ('Rajpath, Delhi', (28.6136152, 77.2150845)),('Nehru Museum, Delhi', (28.6026029, 77.1987395)), ('Delhi Haat, Delhi', (28.572745, 77.2090213)),('Hauz Khas Village, Delhi', (28.5533997, 77.1941654)), ('Qutab Minar, Delhi', (28.5244281, 77.1854559)), ('Lotus Temple, Delhi', (28.553492, 77.25882639999999)), ('Lajpat Nagar', (28.567593, 77.245519)),('Nizamuddin Aulia Dargah', (28.591152, 77.241843)),('IIITD, Delhi', (28.5456282, 77.2731505))]def get_path():	nodes = []	actual = np.load('actual_distance.npy')	for idx, l in enumerate(coordinates):		nodes.append(Nodes(idx, l[0], l[1][0], l[1][1]))		heuristic = np.zeros((len(nodes), len(nodes)))	for i in nodes:		for j in nodes:			if i.name != j.name:				heuristic[i.number][j.number] = i.find_distance(j)			else:				heuristic[i.number][j.number] = 0		came_from, cost_so_far, closedset = A_star(nodes, heuristic, actual, nodes[0], nodes[len(nodes)-1])	if came_from is not None and cost_so_far is not None and closedset is not None:		l = [nodes[len(nodes)-1].number]		x = came_from[nodes[len(nodes)-1].number]		while x != nodes[0].number:			l.append(x)			x = came_from[x]		l.append(x)		l.reverse()		print("path from " + str(nodes[0].number) + " to " + str(nodes[len(nodes)-1].number))		print(l)		return l# print (get_path())def route_display():	url = "file://"+os.getcwd()+"/map.html"	driver = webdriver.Chrome("/home/mohit/Desktop/chromedriver") #change location according to where you download the driver for selenium	lat = []	lon = []	# l = get_path()	l = [0,4,3,10,11,12]	for i in l:	    lat.append(coordinates[i][1][0])	    lon.append(coordinates[i][1][1])	gmap = gmplot.GoogleMapPlotter(lat[0],lon[0],18)	l_lat=[]	l_lon=[]	for x in coordinates:	    l_lat.append(x[1][0])	    l_lon.append(x[1][1])	gmap.plot(l_lat,l_lon,'blue', edge_width=10)	gmap.scatter(l_lat,l_lon,"red")	llat = []	llon = []	for i in range(len(lon)):	    gmap = gmplot.GoogleMapPlotter(lat[i],lon[i],13)	   	    gmap.scatter(l_lat,l_lon,"red", edge_width=10)	    gmap.scatter(l_lat[0:1:1],l_lon[0:1:1],"blue", edge_width=10)	    gmap.scatter(l_lat[len(l_lat)-1:len(l_lat):1],l_lon[len(l_lat)-1:len(l_lat):1],"green", edge_width=10)	   	    llat.append(lat[i])	    llon.append(lon[i])	    gmap.plot(llat[0:len(llat)-1:1],llon[0:len(llon)-1:1],'blue', edge_width=5)	    gmap.plot(llat[len(llat)-2:len(llat):1],llon[len(llat)-2:len(llat):1],'green', edge_width=5)	    gmap.draw('map.html')	    driver.get(url)	    sleep(4)if __name__== '__main__':	route_display()